{
  
    
        "post0": {
            "title": "Tiling Window Manager For Efficiency",
            "content": "Before We Start, A Brief Explanation About Window Manager . A window manager is a system software that controls the placement and appearance of windows within a windowing system in a graphical user interface (GUI). It can be part of desktop enviroment (DE) or be used standalone1. . So basically window manager is how to place a window. There’re three types of window manager (according to arch wiki1): stacking (aka floating) window manager, tiling window manager, and dynamic window manager. . Here’s a brief explanation about those three window manager: . Stacking (aka floating) Window Manager: All window manager that allow the overlapping of windows are considered stacking window manager, although it is possible that not all stacking window manager use the same method. You can check a few list of stacking window manager here. | Tiling Window Manager: Tiling window manager manage the window so that no window are overlapping with each other. You can check a few list of tiling window manager here. | Dynamic Window Manager: Dynamic window manager is a tiling window manager that positioned based on the preset layouts which user can switch. You can check a few list of dynamic window manager here. | . For more detailed comparision of tiling window manager, you can check here. . . The Window Manager I’ve Tried . For now (at the times of writing this post), i only have tried 2 window manager. My first window manager is qtile and my second window manager is i3. You can check below for more (not really) detailed explanation(?). . i3 Window Manager . i3 is one of tiling type window manager, for more info you can check at their website. I’m just gonna explain configuration that i’ve made at my github repo. For the record, this is my current window manager (at the time writing this post). I’m using the manjaro i3 edition. . First of all, i changed the mod keybinding from super key (or some people call it windows key) to alt key. You can change the mod keybinding by change set $mod Mod4 (super key) to set $mod Mod1 (alt key) in config file (you can find config file in folder .i3). For the most part i used the default config from manjaro i3 edition but i add a few program and even changed the i3 status bar with polybar. Here’s what i used in this config: . pywal: I use this for color scheme around my i3 environment (such as terminal, border color around window, etc) | polybar: I use this to replace i3 status bar because i can place the clock and date in the middle (i have no ide how to do that in i3 status bar or even py3status) and it has quite a lot of customization. You can also use py3status if you want. | rofi: I use this as application manager instead of dmenu, because it’s more convenient for me (rofi appear in the middle meanwhile dmenu appear at the top). | conky: I use this to take a glance what process currently taking up resources (for more detailed info i use htop). | flameshot: I use this to take screenshot. | . Setting Up Keybinding . For setting up keybinding you can use bindsym, for example: bindsym $mod+q kill for close focused or currenly active window. Other than setting up keybindings, you can also set a program to do a certain thing, for example: set $myTerm alacritty, every thing that used $myTerm gonna access the command via terminal alacritty. Alacritty is my current (at the time of typing this post) terminal emulator, i also have xterm as a backup terminal emulator. Example of using $myTerm: bindsym $mod+e exec $myTerm -e ranger to open ranger file manager. . Setting Up Polybar . For setting up polybar, you need to move the default polybar config. In my case, the default config is in /usr/share/doc/polybar/ but if it’s not there, you can use locate polybar | grep config. . First of all, make a polybar folder in .config folder. After that move the default polybar config into those folder (the path should be like this .config/polybar/config). You can change the default config to anything you want, but remember the bar name because we’re gonna use the bar name to launch the polybar. The default bar name should be like this [bar/example], you can change it to the name you want and please specify the monitor for the polybar. You can check you monitor name by typing xrandr on terminal. Here’s an example how to set a monitor in polybar config: . After i typed xrandr on my terminal, i got my laptop screen name eDP-1 so i’m gonna use my laptop screen to display the polybar. . [bar/mainbar-i3] monitor = {env:MONITOR:eDP-1} . After you’re done with your polybar config, the next step is to add launch.sh. What is launch.sh? well, it’s basically to launch all of our polybar bar config (that has this naming scheme [bar/example]). Here’s an example of launch.sh in two monitor (each bar config has different monitor assigned to it): . #!/usr/bin/bash #Terminate already running bar instances killall -q polybar #Wait until the process have been shut down while pgrep -u $UID -x polybar &gt;/dev/null; do sleep i; done #launch bar polybar mainbar-i3 &amp; polybar secondbar-i3 &amp; echo &quot;bars launched...&quot; . Who Should Try or Use i3? . i3 is a ‘manual’ tiling window manager so it doesn’t really have default layout which is different from dynamic ‘tiling’ window manager, you need to specify where the window opened (whether the window opened on the right or below). If you want to use i3 you might want to consider that. So, who should try or use i3? everyone who wants a tiling window manager and doesn’t really mind to have manually control where the window appear, that’s all. . . Qtile Window Manager . Qtile is one of dynamic window manager that use python as basis configuration, for more info you can check at their website. . In my config repo i usually use MonadTall layout or Max layout. MonadTall layout basically split the first two window into half vertically and then for the third and so on gonna split the right window horisontally. Max layout basically have the application automatically take up the whole screen, that’s all. For more build-in layouts you can check their documentation here. . I used qtile window manager first before switch to i3 because the configuration is in python but what i don’t really like is how qtile treat multiple screen. When i want to switch to second monitor, it swapped the application on second monitor to first monitor (currently active monitor) and that’s not what i want, i just want to switch to different screen and not have application on that screen swapped with application on my currently active screen. It was confusing and then i tried i3wm after that. . The config in my repo is a basic config i’ve done because i don’t really like the workflow of qtile. Sorry about that. . Who Should Try or Use Qtile? . If you’re fine with the workflow of qtile, wants to try or use dynamic window manager, like to have or doesn’t really mind preconfigured layout, and have experience with python then you might want to try qtile. Don’t get me wrong, qtile is good as a window manager but unfortunately it doesn’t meet my needs. . . The Pros and Cons of Tiling Window Manager . Pros: . You don’t have to worry about placement of your window because it’s automatically split the workplace for you. | You use mouse less. | All your application is right there without any overlap window. Surprise, you haven’t close me yet so i’m gonna take up your computer resources. . | . Cons: . If you open too much application then the application size gonna become smaller. (that’s why use virtual desktop or workspace 1 to 8). | It’s kind of hard to setting for first time. After that hard time, you can backup your previous config and use it again in other computer. Nice. | . . To Wrap Things Up . If you want to use keyboard-oriented navigation or you don’t want to use mouse often, then you probably should try using tiling window manager. But, as i’ve mentioned above, it took time to learn how to configure it (and i think it’s worth your time). . If you’re still not sure, you can try it first in virtual machine (such as virtualbox or virt-manager) and then you could copy those config file to your new installation. . . Example of i3 Window Manager . Moderate use: . | Too much window in one workspace can be bad: . | . . Footnotes . Arch linux wiki (window manager). &#8617; &#8617;2 . |",
            "url": "https://bruhtus.github.io/scrawl/linux/english/2020/10/15/tiling-window-manager.html",
            "relUrl": "/linux/english/2020/10/15/tiling-window-manager.html",
            "date": " • Oct 15, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Pavement Distress Detector Using Single Shot Detector (SSD)",
            "content": "Before We Start, Here’s a Diagram Process of This Project . . A Brief Explanation About Single Shot Detector (SSD) . Single shot detector is a deep learning method presented by Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian Szegedy, Scott Reed4, Cheng-Yang Fu, Alexander C. Berg in their research paper SSD: Single Shot Multibox Detector. There are 2 commonly used SSD model, that is, SSD300 and SSD512. Here’s a brief explanation about SSD300 and SSD512: . SSD300: More fast. | SSD512: More accurate. | . Long story short, SSD300 is about speed. If you need speed than you should probably use SSD300 (i haven’t tried the mobilenet as base network at the time to type this, so at this time knowledge SSD300 is faster than SSD512). Meanwhile, SSD512 is about accuracy. It doesn’t really show up in image processing but in video processing, i notice that there’s a frame rate drop while doing live object detection. To be fair, SSD300 has frame rate drop as well but it’s still usable (around 7-10 frame per second) but SSD512 has frame rate around 3-5 frame per second. Who want to watch a video with 3 fps?? If you’re that kind of person then, go ahead. You do you mate. . For the record, at that time when I try live detection, i use opencv to display live detection video. i’m not sure whether it is opencv fault or the model fault because if I save the video result, the video itself has no frame rate drop. It’s weird but it happens, so let’s go on with saving the video and forget about live detection (for now, until i find some way to do live detection). . So, in this project i’m not gonna make it live detection. Rather than live detections, we’re gonna save the video result first and then display it later. That way it could also reduce some computational cost. . For those who still confused about live detection, to make things simpler, live detection is when you process the video, detect the object, and play the video at the same time. After you detect the object, you immediately display the frame that just recently processed and then processed the next frame. Repeat. . Single Shot Detector (SSD) Architecture That’s Used in This Project . As explained above, in this project we’re gonna use SSD512. SSD512 is basically SSD with input image 512x512. The basic architecture of SSD contains 2 part, base network and extra feature layers. The base network layers are based on standard architecture used for high quality image classification (truncated before classification layers). The extra feature layers used for multi-scale feature maps for detection and convolutional predictors for detection. . Here is an architecture single shot detector that used in this project (made this with NN architecture maker): Information: . Input image. | Base Network (truncated before classification layers). | Layer 6 and layer 7 of base network (from fully-connected layer turned into classification layer). | Extra feature layers. | Collection of boxes and scores. | Base Network . The base network used in this project is Visual Geometry Group (VGG). I chose VGG because of transfer learning capability so that i could have a good result with small dataset. To be more specific, in this project i used VGG16, here is a brief explanation of each layers: . In the first layer, there’s a convolutional process with kernel filter 3x3 and stride (total shift filter per pixel) 1 pixel. That process repeat 2 times and then did some max pooling with kernel filter 2x2 and stride 2 pixel. | In the second layer until fourth layer, the model did the same thing as in first layer. | The difference was in fifth layer. In fifth layer, the convolution process still the same as the other four layers but the max pooling process was different from the other four layers. The max pooling process used kernel filter 3x3 with stride 1 pixel with padding (adding zero value around pixel image) 1. You can check the illustration below to understand the process of max pooling with kernel filter 3x3, stride 1, and padding 1. | And here’s a VGG16 after truncated from classification layers: . If you want to calculate the result from max polling, you can use this equation 1: Information: . kernel_size, stride, padding, and dilation can be 1 integer (in this case, the value for height and width are the same) or 2 integer (in this case, the first integer is height and the second integer is width). | For more info you can see pytorch page. | Here’s some example of max pooling calculation with input 32x32, kernel filter 3x3, stride 1, padding 1, and dilation 1: . Layer 6 and Layer 7 . After feature extraction process in base network, the next layers is to change layer 6 and 7 of base network from fully-connected into convolutional layer with subsample parameters from fully-connected 6 (fc6) and fully-connected 7 (fc7). The convolution operation used in layer 6 and layer 7 is atrous convolution, you can see atrous convolution shift below: . With atrous convolution we can expand area of observation for feature extraction while maintaning the amount of parameters fewer than traditional convolution operation. . Extra Feature Layers . Extra feature layers is a prediction layers. In this layer, the model predict the object using default box. Default box is a box with various aspect ratio in every location of feature maps with different size. You can see an example of default box below 2 . In the last layer is a collection of default boxes which closer to ground truth box with confidence score from that default boxes. . . Take A Video (Training Video and Testing Video) . In this part, i’m gonna explain about the video used in this project. The camera configuration, the place where the video taken, the camera angle and height from the road. . The place where the video taken was in Surabaya, at Kertajaya Indah Timur IX, Kertajaya Indah Timur X, and Kertajaya Indah Timur XI. The camera angle was perpendicular(?) with the road (90 degrees) and the camera position from the road was 200 cm. . There’re 7 video taken, 3 for training and 4 for testing. The format of the video was *.mp4. You can check the location partition of the video taken below: The black block is for testing and the white block is for training. You can check the position of the camera below: . . Setting Up The Config File . For more detailed configuration please check develop guide by Congcong Li. In this post i’m gonna explain it the easiest way. . Basic Configuration . To make things easier, copy the format dataset you want. For example, in this project i want to use COCO dataset format. Then, i copied the coco.py in the path ssd/data/datasets/ and rename it to my_dataset.py. After that, edit the class names for your classification class. In this project, the class i’m gonna use is alligator crack, longitudinal crack, transverse crack, and pothole. Also, don’t forget to change the class COCODataset to MyDataset. . The next step is to add those configuration to __init__.py in ssd/data/datasets/. For example: . from .my_dataset import MyDataset _DATASETS = { &#39;VOCDataset&#39;: VOCDataset, &#39;COCODataset&#39;: COCODataset, &#39;MyDataset&#39;: MyDataset, } . Another next step is to add the path of your datasets and anotations to the path_catlog.py in ssd/config/. For example: . import os class DatasetCatalog: DATA_DIR = &#39;datasets&#39; DATASETS = { &#39;my_custom_train_dataset&#39;: { &quot;data_dir&quot;: &quot;train&quot;, &quot;ann_file&quot;: &quot;annotations/train.json&quot; }, &#39;my_custom_validation_dataset&#39;: { &quot;data_dir&quot;: &quot;validation&quot;, &quot;ann_file&quot;: &quot;annotations/validation.json&quot; }, } @staticmethod def get(name): if &quot;my_custom_train_dataset&quot; in name: my_custom_train_dataset = DatasetCatalog.DATA_DIR attrs = DatasetCatalog.DATASETS[name] args = dict( data_dir = os.path.join(my_custom_train_dataset, attrs[&#39;data_dir&#39;]), ann_file = os.path.join(my_custom_train_dataset, attrs[&#39;ann_file&#39;]), ) return dict(factory=&quot;MyDataset&quot;, args=args) elif &quot;my_custom_test_dataset&quot; in name: my_custom_train_dataset = DatasetCatalog.DATA_DIR attrs = DatasetCatalog.DATASETS[name] args = dict( data_dir = os.path.join(my_custom_train_dataset, attrs[&#39;data_dir&#39;]), ann_file = os.path.join(my_custom_train_dataset, attrs[&#39;ann_file&#39;]), ) return dict(factory=&quot;MyDataset&quot;, args=args) . And finally, for the *.yaml file for configuration i copied vgg_ssd512_coco_trainval35k.yaml in configs folder and rename it to config.yaml. What i changed from that file was the train and test (or more like validation) like in path_catlog.py, the batch size, and num_classes. I changed batch size because my laptop gpu only capable of 4 batch size. Here’s an example: . Model: num_classes: 5 #the __background__ counted ... DATASETS: TRAIN: (&quot;my_custom_train_dataset&quot;, ) TEST: (&quot;my_custom_test_dataset&quot;, ) SOLVER: ... BATCH_SIZE: 4 ... OUTPUT_DIR: &#39;outputs/ssd_custom_coco_format&#39; . You don’t need to create folder ssd_custom_coco_format, when the training begin the folder gonna created automatically (if the folder didn’t exist). . Validation Configuration . First of all, copy coco folder in ssd/data/datasets/evaluation/ and rename it to my_dataset. Rename the def coco_evaluation to def my_dataset_evaluation in file __init__.py. After that, add folder my_dataset to file __init__.py in ssd/data/datasets/evaluation/. For example: . from ssd.data.datasets import VOCDataset, COCODataset, MyDataset ... from .my_dataset import my_dataset_evaluation def evaluate(dataset, predictions, output_dir, **kwargs): ... elif isinstance(dataset, MyDataset); return my_dataset_evaluation(**args) else: raise NotImplementError . . Training Preparation . Before training the model, we need to do some preparation. There’re two steps in this process, frame extraction and labeling. Without further ado, let’s get started. . Frame Extraction . In this process, i used python library opencv to extract some frame. Here’s the script: . import cv2 import time from fire import Fire from tqdm import tqdm def main(video_file, path_save, speed): # the lower the speed the fastest the frame_rates, speed = 0 (pause) vidcap = cv2.VideoCapture(video_file) current_frame = 0 speed_frame = speed while (vidcap.isOpened()): success, frame = vidcap.read() # success = retrival value for frame length = int(vidcap.get(cv2.CAP_PROP_FRAME_COUNT)) print(f&#39;Current Frame: {current_frame}/{length}&#39;) current_frame += 1 if success == True: cv2.imshow(&#39;Video&#39;, frame) if cv2.waitKey(speed) &amp; 0xFF == ord(&#39;s&#39;): # press s to save the frame cv2.imwrite(f&quot;{path_save}/frame_{current_frame}.jpg&quot;, frame) elif cv2.waitKey(speed) &amp; 0xFF == ord(&#39;q&#39;): # press q to quit break elif cv2.waitKey(speed) &amp; 0xFF == ord(&#39;w&#39;): # play/pause if speed != 0: speed = 0 elif speed == 0: speed = speed_frame else: vidcap.release() cv2.destroyAllWindows() if __name__ == &#39;__main__&#39;: Fire(main) . Every time we press s, it’s gonna take the current frame at that time. For the speed, i usually go for 25 but if you want slower you could change it to 10 or lower (as long as it’s not 0, please). . After the extraction process, i have 652 images/frames for training process. The 652 images/frames have this proportion (There’re a few object in one frame): . Pavement Distress Object . Alligator Crack | 367 | . Longitudinal Crack | 951 | . Transverse Crack | 243 | . Potholes | 161 | . Labeling . For the labeling i use labelme, you could check the tutorial here and to change labelme format to coco dataset format here. There’s nothing much to explain about labeling, you just give box to an object and save with the label you want. So, let’s move on. . . Here We Go, It’s Training Time! . For the training process i use google colaboratory (how to use google colaboratory is beyond this post, sorry) but you could also use other services such as paperspace. Here’s an example of command line if you use you local machine or cloud services: Local: . python train.py --config-file configs/config.yaml . Cloud: . !python train.py --config-file configs/config.yaml . Basically there’s no difference so i think it’s not that difficult, good luck. . Loss Function Graph . As the training begin, please don’t forget to check the loss function. The closer the loss function to zero the better but be carefull so that it doesn’t overfitting (a model memorized the training data and have difficulty predicting the testing data). Here’s the unscientific tips from me, stop the training process if you don’t see any improvement in loss function. For example, if the loss function stuck at 0.9 - 0.5 for quite some time then you should stop the process. Here’s my loss function graph: . . Testing Preparation . Before testing the model, there’re a few things we need to do: . Copy or move video you want to use into folder input. | Copy or move configuration file (*.yaml) into folder configs. | Copy or move folder that has training result into folder outputs (in this project the folder name is ssd_custom_coco_format). The folder name must be the same as in configuration file OUTPUT_DIR. | If every file and folder in the right places, then let’s move on. | . Go Get Them (The Pavement Distresses)! It’s Testing Time! . For this project, there’s a problem with the counting. Because i have no idea how to implement tracking so i made the counting in the iteration frame (detection at every frame, which is insane) and that’s makes the total counting more than the actual object. To fix this problem (kind of), i do the counting for every 20 frames. The reason was because at every 20 frames, the object detected was closer to the total of actual object than every 10, 15, 25, and 30 frames. So, for the evaluation i’m gonna evaluate the detection result every 20 frames. Thanks. . A Brief Showcase and Explanation of The Results . Below is the result: . Video Testing 1 . Class Name Counting Results Actual Objects . Alligator Crack | 2 | 3 | . Longitudinal Crack | 4 | 29 | . Transverse Crack | 8 | 11 | . Potholes | 1 | 2 | . Class Name True Positive True Negative False Positive False Negative . Alligator Crack | 2 | 11 | 0 | 1 | . Longitudinal Crack | 4 | 9 | 1 | 25 | . Transverse Crack | 6 | 7 | 1 | 5 | . Potholes | 1 | 12 | 0 | 1 | . Video Testing 2 . Class Name Counting Results Actual Objects . Alligator Crack | 14 | 8 | . Longitudinal Crack | 5 | 6 | . Transverse Crack | 1 | 4 | . Potholes | 0 | 2 | . Class Name True Positive True Negative False Positive False Negative . Alligator Crack | 7 | 3 | 7 | 1 | . Longitudinal Crack | 2 | 8 | 2 | 4 | . Transverse Crack | 1 | 9 | 0 | 3 | . Potholes | 0 | 10 | 0 | 2 | . Video Testing 3 . Class Name Counting Results Actual Objects . Alligator Crack | 21 | 8 | . Longitudinal Crack | 7 | 15 | . Transverse Crack | 1 | 1 | . Potholes | 2 | 4 | . Class Name True Positive True Negative False Positive False Negative . Alligator Crack | 8 | 7 | 10 | 0 | . Longitudinal Crack | 4 | 11 | 2 | 11 | . Transverse Crack | 1 | 14 | 0 | 0 | . Potholes | 2 | 13 | 0 | 2 | . Video Testing 4 . Class Name Counting Results Actual Objects . Alligator Crack | 23 | 22 | . Longitudinal Crack | 13 | 46 | . Transverse Crack | 4 | 12 | . Potholes | 5 | 22 | . Class Name True Positive True Negative False Positive False Negative . Alligator Crack | 10 | 14 | 8 | 12 | . Longitudinal Crack | 8 | 16 | 3 | 38 | . Transverse Crack | 2 | 22 | 2 | 10 | . Potholes | 4 | 20 | 0 | 18 | . From the counting results above we can see that the model struggle to detect longitudinal crack and have a lot of alligator crack detections (detected two times or more). There’re 2 reasons for that, the first is that there’s not enough small-sized longitudinal crack in training dataset and the second is the frame field-of-view too narrow so that a lot of alligator crack devided into different frames and detected multiple times. Here’s an example of that problem: . Undetected Small Longitudinal Crack: . | Multiple Detection of Alligator Crack: . | . And then, we have the precision and recall of the model as below: . Video Precision Recall Accuracy . Video Testing 1 | 91.43% | 46.25% | 60.69% | . Video Testing 2 | 50% | 36.45% | 69.58% | . Video Testing 3 | 77.78% | 69.17% | 75.45% | . Video Testing 4 | 69.57% | 24.42% | 53.81% | . At the time of making this post, i’m still not sure whether to use accuracy or f1-score so for now i’m gonna use accuracy. . The difference between video testing 1 to 4 is the total of small-sized pavement distress and video testing 3 has the least total of small-sized pavement distress of all video. So that means, for this trained weight, we obtain the best accuracy when we have the least small-sized pavement distress. . . Future Suggestion . By no means this is not the best implementation of SSD for pavement distress detection. I have only a few training dataset and a few testing dataset. So you could say what i did here is a minimum requirement that result in minimum performance. You can improve this project quite a lot. . If you want to improve this project, you can start from these things: . Use a lot of training data and testing data. | Use a camera that has wide angle lens (because 50mm lens is not wide enough). | . Side Notes . This is not really important, it’s more like a momento for me. In the undergraduate thesis defence(?) there’s this examiner who has a misconception about testing process and validation process. That examiner switch the possition of testing process as validation process and validation process as testing process, so that really confusing and we have quite an argument there. I even ask in stackexchange if i’m wrong or not and it turns out that examiner has switch the term for testing and validation. Now i feel stupid for having an argument with that examiner. . . Footnotes . Pytorch maxpool2d &#8617; . | SSD: Single Shot Multibox Detector. &#8617; . |",
            "url": "https://bruhtus.github.io/scrawl/deep%20learning/english/2020/10/11/pavement-distress-ssd.html",
            "relUrl": "/deep%20learning/english/2020/10/11/pavement-distress-ssd.html",
            "date": " • Oct 11, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Home",
          "content": "",
          "url": "https://bruhtus.github.io/scrawl/_pages/1home.html",
          "relUrl": "/_pages/1home.html",
          "date": ""
      }
      
  

  

  

  
      ,"page3": {
          "title": "About Me",
          "content": "My name is Robertus Diawan Chris. I made silly things who currently live in surabaya, passionate about linux, tiling window manager, deep learning, art, and technology in general. I go normal from time to time. I’m currently using manjaro linux distro and i3wm as a window manager. . . Tiny CV . Current: . Available for hire . Education: . Bachelor of Mathematics in Mathematics Department. Major in Computer Science. Institut Teknologi Sepuluh Nopember. . Skills: . Python | Adobe Lightroom | Adobe Photoshop | . . All my social media . . Q&amp;A . Q: Why is it so boring? A: I’m busy making silly things. . Q: Best way to get in touch? A: hibruhtus@gmail.com . Q: Which template did you use? A: I use fastpages1 . . That’s all, here it comes the BRUH MOMENTUM 😮 . . This website is powered by fastpages. A blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://bruhtus.github.io/scrawl/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bruhtus.github.io/scrawl/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}